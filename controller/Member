package com.lambcastle.lambcastle.controller;

import com.lambcastle.lambcastle.dto.MemberFormDto;
/* MemberFormDto Class를 import
주로 웹 애플리케이션에서 사용자로부터 받은 폼 데이터를 서버로 전달할 때 사용 */
import com.lambcastle.lambcastle.entity.Member;
/* Member entity class를 import
DB 회원정보와 매핑되는 entity, JPA나 Hibernate같은 ORM 프레임워크를 통해 DB와 상호작용 함 */
import com.lambcastle.lambcastle.service.MemberService;
/* 서비스 레이어에 위치한 MemberService class를 import
회원 관련 비지니스 로직 처리: 회원 가입, 회원 정보 조회, 회원 삭제 등 */
import jakarta.validation.Valid;
/* Jakarta Validation API의 Valid annotaion import
@Valid: 인스턴스 필드 값에 대한 유효성 검사, 주로 컨트롤러에서 폼 데이터를 받을 때 사용,
DTO 필드에 대한 유효성 검사를 자동으로 수행함 */
import lombok.RequiredArgsConstructor;
/* Lombok library의 RequiredArgsConstructor annotaion import
@RequiredArgsConstructor: final 또는 @NonNull로 선언된 필드를 포함하는 생성자 자동 생성
DI 간소화 */
import org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration;
/* Spring Boot의 ValidationAutoConfiguration class import
유효성 검사를 자동으로 구성, 유효성 검증 기능 자동으로 활성화 */
import org.springframework.security.crypto.password.PasswordEncoder;
/* Spring Security의 PasswordEncoder interface import */
import org.springframework.stereotype.Controller;
/* Spring의 Controller annotaion import
Spring MVC의 컨트롤러로 작동, HTTP 요청 처리 및 적절한 뷰 반환 */
import org.springframework.ui.Model;
/* Spring의 Model interface import
컨트롤러 메소드에서 데이터를 뷰로 전달할 때 사용, 뷰에서 참조 가능하게 모델에 데이터 추가 */
import org.springframework.validation.BindingResult;
/* Spring의 BindingResult class import
유효성 검증의 결과를 담는 인스턴스, 에러 정도 확인, 컨트롤러에서 에러 처리 가능 */
import org.springframework.web.bind.annotation.GetMapping;
/* Spring의 GetMapping annotation import
HTTP GET 요청을 특정 메소드와 매핑시킴, 주로 데이터 조회 및 폼 반환 */
import org.springframework.web.bind.annotation.PostMapping;
/* Spring의 PostMapping annotation import
HTTP POST 요청을 특정 메소드와 매핑시킴, 주로 폼 데이터를 서버로 전송 */
import org.springframework.web.bind.annotation.RequestMapping;
/* Spring의 RequestMapping annotation import
특정 URL 패턴과 컨트롤러 또는 메소드 매핑
Class 레벨에서 사용될 경우, 해당 클라스의 모든 메소드는 이 URL 패턴 하위에서 작동 */

@RequestMapping("/members")
/* 이 컨트롤러가 처리하는 URL 경로의 기본 값 설정
이 컨트롤러의 모든 메소드는 '/members' 경로 아래에서 작동함 */
@Controller
// Spring MVC의 컨트롤러임, HTTP 요청 처리, 뷰 반환
@RequiredArgsConstructor
/* Lombok에서 제공하는 기능, DI를 위한 코드 간소화,
 final로 선언된 모든 필드를 매개변수로 받는 생성자를 자동 생성함
 Constructor Injection 방식으로 memberService, passwordEncoder, validationAutoConfiguration 주입 */

public class MemberController { // 회원가입 관련 요청을 처리하는 컨트롤러

    private final MemberService memberService; // 회원 관련 비지니스 로직 처리
    private final PasswordEncoder passwordEncoder; // 사용자가 입력한 패스워드를 암호화 해 저장
    private final ValidationAutoConfiguration validationAutoConfiguration; // 유효성 검증 자동화
    
    @GetMapping(value = "/new")
    /* '/members/new' 경로로 GET 요청이 들어올 때 'member/new' 호출됨, 회원가입 페이지
    memberForm(Model model)과 매핑 */
    public String memberForm(Model model) { // Model 을 사용해 데이터를 뷰로 전달
        model.addAttribute("memberFormDto", new MemberFormDto());
        // 새로운 MemberFormDto 인스턴스 생성, 모델에 추가
        // 주로 컨트롤러 메소드에서 뷰에 데이터를 전달하기 위해 사용
        // memberFormDto 이름으로 빈 MemberFormDto 인스턴스 추가 후 뷰 템플릿에 사용되어 폼 렌더링 및 데이터 처리
        return "member/memberForm"; // 뷰 파일 member/memberForm.jsp(.html) 찾아 렌더링 함
    }

    @PostMapping(value = "/new") // 'members/new'로 들어오는 POST 요청 처리, 폼 데이터 제출
    // 회원가입 폼 처리 로직: 유효성 검사, 회원 객체 생성, 예외 처리, 성공시 리다이렉 등의 기능 수행
    public String memberForm(@Valid MemberFormDto memberFormDto, BindingResult bindingResult, Model model) {
		/* 회원가입 폼 데이터 처리 컨트롤러 메소드 -> 폼 데이터 유효성 검사, 에러 처리, 뷰에 데이터 전달
		@Valid로 MemberFormDto 인스턴스의 폼 데이터에 대해 유효성 검사 -> 결과는 BindingResult에 저장됨
		BindingResult로 유효성 검사 실패 확인, model에 기존 입력 데이터를 전달해 사용자가 재입력하지 않게 함
		유효성 검사 통과 후 폼 데이터를 바탕으로 새 Member 인스턴스 생성, DB에 저장, 뷰 이름 반환 및 리다이렉 */
        if (bindingResult.hasErrors()) {
            return "member/memberForm"; // 유효성 검사 실패하면 memberFrom 반환, 입력한 데이터는 유지
        }
        try { // 예외가 발생할 수 있는 코드, 회원 객체 생성 및 DB에 저장
            Member member = Member.createMember(memberFormDto, passwordEncoder);
            // Member Class의 createMember 메소드를 호출해 새로운 Member 객체 생성 후 그 객체를 변수 member에 할당
            memberService.saveMember(member); // 생성된 Member 객체를 DB에 저장하는 메소드
        } catch (IllegalStateException e) { // 예외 발생 시 실행될 코드
	        // IllegalStateException이 발생하면 에러 메시지를 모델에 추가 후 다시 회원가입 폼 페이지로 리다이렉
            model.addAttribute("errorMessage", e.getMessage());
            // 컨트롤러에서 처리된 예외 메시지가 뷰로 전달되고 화면에 출력됨
            return "member/memberForm";
        }
        Member member = Member.createMember(memberFormDto, passwordEncoder); 
        // 사용자로부터 입력된 회원정보를 담고있는 MemberFormDto 객체를 바탕으로 실제 Member 객체 생성
        memberService.saveMember(member); // Member 객체를 DB에 저장해 회원정보 영구 저장
        return "redirect:/";
    }
}
